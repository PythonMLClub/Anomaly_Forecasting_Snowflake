
-- *********************************************************************************************************************
-- Step 1: Setting Up the Environment
--         - Define and assign roles
--         - Create necessary database, schema, and warehouse resources
-- *********************************************************************************************************************

-- Switch to AccountAdmin role to manage roles and permissions
USE ROLE accountadmin;

-- 1.1 Create and configure the role for anomaly detection
CREATE OR REPLACE ROLE anomaly_role;

-- Grant CREATE permissions to the role
GRANT CREATE DATABASE ON ACCOUNT TO ROLE anomaly_role;
GRANT CREATE WAREHOUSE ON ACCOUNT TO ROLE anomaly_role;

-- Assign the new role to the specified user
GRANT ROLE anomaly_role TO USER ANOMALYFORCASTING;

select current_user();

-- 1.2 Switch to the new role to create resources as the assigned role
USE ROLE anomaly_role;

-- 1.3 Create the database, schema, and virtual warehouse
CREATE OR REPLACE DATABASE anomaly_db;
CREATE OR REPLACE SCHEMA anomaly_db.anomaly_schema;

CREATE OR REPLACE WAREHOUSE anomaly_wh
  WITH WAREHOUSE_SIZE = 'XSMALL'
  AUTO_SUSPEND = 300  -- Auto suspend after 5 minutes of inactivity
  AUTO_RESUME = TRUE; -- Auto resume on demand

-- 1.4 Grant usage permissions on the database and schema to the role
GRANT USAGE ON DATABASE anomaly_db TO ROLE anomaly_role;
GRANT USAGE ON SCHEMA anomaly_db.anomaly_schema TO ROLE anomaly_role;

GRANT CREATE SNOWFLAKE.ML.ANOMALY_DETECTION ON SCHEMA anomaly_db.anomaly_schema TO ROLE anomaly_role;


-- *********************************************************************************************************************
-- Step 2: Loading and Preparing the Data
--         - Create a stage for uploading data files
--         - Define the data table and file format
--         - Load data from CSV file into the table
-- *********************************************************************************************************************

-- 2.1 Create a stage to store the CSV file for anomaly data
CREATE OR REPLACE STAGE anomaly_stage;

GRANT READ ON STAGE anomaly_db.anomaly_schema.anomaly_stage TO ROLE anomaly_role;
GRANT WRITE ON STAGE anomaly_db.anomaly_schema.anomaly_stage TO ROLE anomaly_role;


-- 2.2 Define the table structure for the anomaly detection features
CREATE OR REPLACE TABLE anomaly_db.anomaly_schema.CLM_FACT (
    building_id INTEGER,
    PAID_YEAR_MONTH VARCHAR(20),
    PAID_YEAR_MONTH_TM TIMESTAMP_NTZ,
    PAID_AMT FLOAT,
    anomaly BOOLEAN,
    site_id INTEGER,
    primary_use STRING,
    air_temperature FLOAT,
    cloud_coverage FLOAT,
    dew_temperature FLOAT,
    precip_depth_1_hr FLOAT,
    sea_level_pressure FLOAT,
    wind_direction FLOAT,
    wind_speed FLOAT,
    hour INTEGER,
    weekday INTEGER,
    month INTEGER,
    year INTEGER,
    is_holiday BOOLEAN
);

-- 2.3 Define the file format for the CSV data file
CREATE OR REPLACE FILE FORMAT anomaly_csv_format
  TYPE = 'CSV'
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'  -- Fields optionally enclosed by double quotes
  PARSE_HEADER = TRUE                   -- Parse header row in CSV
  TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS'  -- Update timestamp format
  FIELD_DELIMITER = ',';                -- Specify comma as the field delimiter
           

-- 2.4 Load data from the CSV file into the anomaly_features table
COPY INTO anomaly_db.anomaly_schema.CLM_FACT
FROM @anomaly_stage/anomaly.csv
FILE_FORMAT = anomaly_csv_format
MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE  -- Match columns by name, case-insensitive
ON_ERROR = 'CONTINUE';                   -- Continue loading even if there are errors

-- 2.5 Verify data loading by selecting from the table
SELECT * FROM anomaly_db.anomaly_schema.CLM_FACT;


INSERT INTO ANOMALY_DB.ANOMALY_SCHEMA.CLM_FACT (
    BUILDING_ID,
    PAID_YEAR_MONTH,
    PAID_YEAR_MONTH_TM,
    PAID_AMT,
    SITE_ID,
    PRIMARY_USE,
    AIR_TEMPERATURE,
    CLOUD_COVERAGE,
    DEW_TEMPERATURE,
    PRECIP_DEPTH_1_HR,
    SEA_LEVEL_PRESSURE,
    WIND_DIRECTION,
    WIND_SPEED,
    HOUR,
    WEEKDAY,
    MONTH,
    YEAR,
    IS_HOLIDAY
) VALUES
    (121, '201601', '2016-02-16 00:00:00', 5.0 , 1, 'Education', 20.5, 1.0, 15.3, 0.0, 1015.0, null, 5.5, 10, 2, 2, 2016, FALSE);

DELETE FROM anomaly_db.anomaly_schema.CLM_FACT WHERE meter_reading = 85000;

SELECT * FROM anomaly_db.anomaly_schema.CLM_FACT;

-- *********************************************************************************************************************
-- Step 3: Create the training data view
--         Filters data up to a specified timestamp, excluding rows with NULL values in any column.
-- *********************************************************************************************************************

CREATE OR REPLACE VIEW anomaly_db.anomaly_schema.anomaly_vw_train AS
SELECT *
FROM anomaly_db.anomaly_schema.CLM_FACT
WHERE PAID_YEAR_MONTH_TM < '2016-01-14 21:00:00.000';
  
select * from anomaly_vw_train;

-- *********************************************************************************************************************
-- Step 4: Create the testing data view
--         Filters data from a specified timestamp onward, excluding rows with NULL values in any column.
-- *********************************************************************************************************************

CREATE OR REPLACE VIEW anomaly_db.anomaly_schema.anomaly_vw_test AS
SELECT *
FROM anomaly_db.anomaly_schema.CLM_FACT
WHERE PAID_YEAR_MONTH_TM >= '2016-01-16 21:00:00.000';

select * from anomaly_vw_test;

-- *********************************************************************************************************************
-- Step 5: Verification Queries
--         Checks for any remaining rows with NULL values in the training and testing views.
--         These should return a count of 0 if the views are correctly filtered.
-- *********************************************************************************************************************


SELECT COUNT(DISTINCT PAID_YEAR_MONTH_TM) AS unique_timestamps
FROM anomaly_db.anomaly_schema.anomaly_vw_train;

SELECT COUNT(DISTINCT PAID_YEAR_MONTH_TM) AS unique_timestamps
FROM anomaly_db.anomaly_schema.anomaly_vw_test;


SELECT MAX(PAID_YEAR_MONTH_TM) AS last_training_date
FROM ANOMALY_DB.ANOMALY_SCHEMA.anomaly_vw_train;      -- 2016-01-14 20:00:00.000

SELECT MAX(PAID_YEAR_MONTH_TM) AS last_training_date
FROM ANOMALY_DB.ANOMALY_SCHEMA.anomaly_vw_test;       --2016-01-21 23:00:00.000

SELECT MAX(PAID_AMT) AS last_training_date
FROM ANOMALY_DB.ANOMALY_SCHEMA.anomaly_vw_train;      -- 6437.91

SELECT 
    MIN(PAID_AMT) AS min_paid_amt,
    MAX(PAID_AMT) AS max_paid_amt,
    AVG(PAID_AMT) AS avg_paid_amt,
    STDDEV(PAID_AMT) AS stddev_paid_amt
FROM anomaly_vw_train;

-- *********************************************************************************************************************
-- Step 6: Train the Anomaly Detection Model (Without Labels)
--         Uses the training view to create a model for detecting anomalies in meter readings.
-- *********************************************************************************************************************

CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION admodel_withoutlabel (
  INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'anomaly_vw_train'),
  TIMESTAMP_COLNAME => 'PAID_YEAR_MONTH_TM',
  TARGET_COLNAME => 'PAID_AMT',
  -- SERIES_COLNAME => 'BUILDING_ID',
  LABEL_COLNAME => ''  --unsupervised
);

-- *********************************************************************************************************************
-- Step 7: Run Anomaly Detection on the Test Data (Without Labels)
--         Applies the trained model to the test data to identify anomalies.
-- *********************************************************************************************************************

-- Run anomaly detection on the new data
CALL admodel_withoutlabel!DETECT_ANOMALIES(
  INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'anomaly_vw_test'),
  TIMESTAMP_COLNAME => 'PAID_YEAR_MONTH_TM',
  TARGET_COLNAME => 'PAID_AMT',
  -- SERIES_COLNAME => 'BUILDING_ID',
  CONFIG_OBJECT => {'prediction_interval': 0.98}
);

--------------------------------------------------------------------------
-- Generate predictions and store the results to a table.
BEGIN
    -- This is the step that creates your predictions.
    CALL admodel_withoutlabel!DETECT_ANOMALIES(
        INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'anomaly_vw_test'),
        -- SERIES_COLNAME => 'BUILDING_ID',
        TIMESTAMP_COLNAME =>'PAID_YEAR_MONTH_TM',
        TARGET_COLNAME => 'PAID_AMT',
        -- Here we set your prediction interval.
        CONFIG_OBJECT => {'prediction_interval': 0.95}
    );
    -- These steps store your predictions to a table.
    LET x := SQLID;
    CREATE or replace TABLE anomaly_detection_without_label AS SELECT * FROM TABLE(RESULT_SCAN(:x));
END;

-- View your predictions with additional columns.
SELECT * FROM anomaly_detection_without_label;

-- *********************************************************************************************************************
-- Step 8: Train the Anomaly Detection Model (With Labels)
--         Create and train the model using known anomalies (label column: 'ANOMALY').
-- *********************************************************************************************************************

CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION admodel_withlabel (
  INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'anomaly_vw_train'),
  TIMESTAMP_COLNAME => 'PAID_YEAR_MONTH_TM',
  TARGET_COLNAME => 'PAID_AMT',
  -- SERIES_COLNAME => 'BUILDING_ID',
  LABEL_COLNAME => 'ANOMALY'  
);

-- *********************************************************************************************************************
-- Step 9: Run Anomaly Detection on the Test Data (With Labels)
--         Apply the labeled model to the test data and store the results.
-- *********************************************************************************************************************

CALL admodel_withlabel!DETECT_ANOMALIES(
  INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'anomaly_vw_test'),
  TIMESTAMP_COLNAME => 'PAID_YEAR_MONTH_TM',
  TARGET_COLNAME => 'PAID_AMT',
  -- SERIES_COLNAME => 'BUILDING_ID',
  CONFIG_OBJECT => {'prediction_interval': 0.9999}
);

--------------------------------------------------------------------------
BEGIN
    -- This is the step that creates your predictions.
    CALL admodel_withlabel!DETECT_ANOMALIES(
        INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'anomaly_vw_test'),
        -- SERIES_COLNAME => 'BUILDING_ID',
        TIMESTAMP_COLNAME =>'PAID_YEAR_MONTH_TM',
        TARGET_COLNAME => 'PAID_AMT',
        CONFIG_OBJECT => {'prediction_interval': 0.9999}
    );
    -- These steps store your predictions to a table.
    LET x := SQLID;
    CREATE or replace TABLE anomaly_detection_with_label AS SELECT * FROM TABLE(RESULT_SCAN(:x));
END;

SELECT * FROM anomaly_detection_with_label;

-- *********************************************************************************************************************
-- Step 10: Compare Models (With and Without Labels)
--         Calculate the total anomalies detected by each model.
-- *********************************************************************************************************************

SELECT 'Without Label' AS model, COUNT(*) AS anomalies_detected
FROM anomaly_detection_without_label
WHERE IS_ANOMALY = TRUE
UNION ALL
SELECT 'With Label' AS model, COUNT(*) AS anomalies_detected
FROM anomaly_detection_with_label
WHERE IS_ANOMALY = TRUE;


-- *********************************************************************************************************************
-- Step 11: Optional - View Model Performance Metrics
--         Check training logs, feature importance, and evaluation metrics if supported in your Snowflake instance.
-- *********************************************************************************************************************


SHOW SNOWFLAKE.ML.ANOMALY_DETECTION;

DROP SNOWFLAKE.ML.ANOMALY_DETECTION ADMODEL;

-- Model without labels
CALL anomaly_db.anomaly_schema.admodel_withoutlabel!SHOW_TRAINING_LOGS();
CALL anomaly_db.anomaly_schema.admodel_withoutlabel!EXPLAIN_FEATURE_IMPORTANCE();
CALL anomaly_db.anomaly_schema.admodel_withoutlabel!SHOW_EVALUATION_METRICS();

-- Model with labels
CALL anomaly_db.anomaly_schema.admodel_withlabel!SHOW_TRAINING_LOGS();
CALL anomaly_db.anomaly_schema.admodel_withlabel!EXPLAIN_FEATURE_IMPORTANCE();
CALL anomaly_db.anomaly_schema.admodel_withlabel!SHOW_EVALUATION_METRICS();

-- *********************************************************************************************************************
-- End of Script
-- *********************************************************************************************************************

